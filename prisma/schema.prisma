// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
 id String @id @default(cuid())
 name String?
 email String @unique
 password String? // Contraseña hasheada (nullable para usuarios OAuth)
 role String @default("user") // Rol del usuario (ej. "user" o "admin")
 emailVerified DateTime?
 image String?
 accounts Account[]
 sessions Session[]
 createdAt DateTime @default(now())
 updatedAt DateTime @updatedAt

  nodeTemplates   NodeTemplate[]   @relation("UserNodeTemplates")
  edgeTemplates   EdgeTemplate[]   @relation("UserEdgeTemplates")
  promptTemplates PromptTemplate[] @relation("UserPromptTemplates")
  chainTemplates  ChainTemplate[]  @relation("UserChainTemplates")
  toolTemplates   ToolTemplate[]   @relation("UserToolTemplates")
  diagrams        Diagram[]        @relation("UserDiagrams")
}

model Account {
 id String @id @default(cuid())
 userId String
 type String
 provider String
 providerAccountId String
 refresh_token String? @db.Text
 access_token String? @db.Text
 expires_at Int?
 token_type String?
 scope String?
 id_token String? @db.Text
 session_state String?
 user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 @@unique([provider, providerAccountId])
}

model Session {
 id String @id @default(cuid())
 sessionToken String @unique
 userId String
 expires DateTime
 user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
 identifier String
 token String @unique
 expires DateTime
 @@unique([identifier, token])
}


model NodeTemplate {
  id          String   @id @default(uuid())
  name        String
  description String?
  code        String   @db.Text
  language    String?  // p.ej. "javascript", "python", "langgraph"
  metadata    Json?    // icon, default props, etc.
  owner       User?    @relation("UserNodeTemplates", fields: [ownerId], references: [id])
  ownerId     String?
  isPublic    Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EdgeTemplate {
  id          String  @id @default(uuid())
  name        String
  description String?
  code        String  @db.Text  // si tu edge lleva código
  language    String?  // p.ej. "javascript", "python", "langgraph"
  metadata    Json?
  owner       User?   @relation("UserEdgeTemplates", fields: [ownerId], references: [id])
  ownerId     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Diagram {
  id         String  @id @default(uuid())
  name       String
  owner      User?   @relation("UserDiagrams", fields: [ownerId], references: [id])
  ownerId    String?
  // Guarda el snapshot completo y cualquier layout (usar JSONB)
  content    Json    @db.JsonB
  isPublic   Boolean @default(false)
  version    Int     @default(1) // opcional: versión del diagrama
  tags       String[] @default([]) // etiquetas simples
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model PromptTemplate {
  id          String   @id @default(uuid())
  name        String
  description String?
  content     String   @db.Text
  metadata    Json?
  owner       User?    @relation("UserPromptTemplates", fields: [ownerId], references: [id])
  ownerId     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ChainTemplate {
  id          String   @id @default(uuid())
  name        String
  description String?
  code        String   @db.Text
  language    String?
  metadata    Json?
  owner       User?    @relation("UserChainTemplates", fields: [ownerId], references: [id])
  ownerId     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ToolTemplate {
  id          String   @id @default(uuid())
  name        String
  description String?
  code        String   @db.Text
  language    String?
  metadata    Json?
  owner       User?    @relation("UserToolTemplates", fields: [ownerId], references: [id])
  ownerId     String?
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}